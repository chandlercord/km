Working Notes about how exit_grp and stop in gdb interact with vcpus.
DO NOT REVIEW

This is a set of working notes AND NEED TO BE CLEANED UP  AND PLACED INTO CODE as comments


PRs:
- exit_grp
- GDB repair work for single thread
- GDB basic thread info on stop
- gdb treads (details tbd)

this is exit_grp support

flags:
machine.pause_requested - someone (exit_grp or gdbstub) need all VCPUs to pause  and exit from KVM_RUN
gdbstub.session_requested - gdb needs to handle debugging session (deliberately named differently to avoid naming mix ups)
vcpu.is_paused - 1 if vcpu KVM_RUN exited and waits of an event allowing it to continue

"pause machine" sequence
- set machine.pause_requested
- set vcpu->is_paused
- apply-all
   if(!paused) {
      set immediate exit
      signal (note: handler is noop, just so the kvm run is interrupted)
   }

"wait for stop" sequence
- blocking . not time sensitive
- busy wait


exit_grp
- do "pause machine" sequence
- wait for all vcpus to stop (pasued == 1)
- tell them to km_vcpu_exit(vcpu, status)
- km_vcpu_exit()
- expected results:
   - gracefully fini
   - tell gdb (if it's around) that we are done

[gdb repair work for single thread should be next PR ]
km_gdb_ask_stub_to_handle_kvm_exit
  - this one should just signal gdb about thread exit, should be renamed to km_gdb_ask_stub_to_handle_vcpu_exit

gdb exit thread
- set gdbstub.handle_exit
 - do pause machine sequence
 - wait for all to stop
 - talk to gdb
 - reset gdbstub.handle_exit , pause_requested and signal all to continues

vcpu.immediate exit is an indication of machine.pause requested

exiting CPU thread:
- set vcpu.paused
- set machine.pause_requested
- signal all vcpu to stop ()
   scan all, and is used && not paused
       - set immediate_exit and signal
wait for all to pause
issue: if thread_create was issued before  pause_requested, the thread/vcpu will be created and run. But then it will be stopped by signal

generic:
   - km_pthread_create: before pthread. if (pause_requested) set immediate_exit to block new vcpu
   - ALL hypercalls , before return if(pause_requested) set(imediate exit). (in case HC is competing between pause_req and immediate_exit are set)

each vcpu:
 if return is INTR assert(machine.pause_requested)
 if (gdbstub.)